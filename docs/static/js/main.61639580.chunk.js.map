{"version":3,"sources":["redux/actions.js","redux/utils/redux-map.js","redux/reducers.js","redux/store.js","components/App.js","index.js"],"names":["init","type","reducerMap","this","actionsToReducers","initialState","actionFn","reducer","actionName","name","reducers","length","startState","action","getReducersForAction","reduce","state","console","log","map","rootReducer","middlewareEnhancer","applyMiddleware","thunkMiddleware","store","createStore","composeWithDevTools","dispatch","App","className","rootElement","document","getElementById","ReactDOM","render","steps","currentStepIndex","intervalId","setInterval","clearInterval"],"mappings":"mLAIaA,G,iBAAO,iBAAO,CACzBC,KAAM,U,gBC2BFC,EAAa,IAhCnB,WACE,aAAe,oBACbC,KAAKC,kBAAoB,GACzBD,KAAKE,aAAe,GAHxB,uCAME,SAAIC,EAAUC,GACZ,IAAIC,EAAkC,oBAAbF,EAA2BA,EAASG,KAAOH,EAC/DH,KAAKC,kBAAkBI,KAC1BL,KAAKC,kBAAkBI,GAAc,IAEvC,IAAIE,EAAWP,KAAKC,kBAAkBI,GACtCE,EAASA,EAASC,QAAUJ,IAZhC,oBAeE,SAAOK,EAAYC,GACjB,OAAOV,KAAKW,qBAAqBD,GAAQE,QAAO,SAACC,EAAOT,GAAR,OAC5CA,EAAQS,EAAOH,KAASD,KAjBhC,kCAoBE,SAAqBC,GACnB,IAAIZ,EAAOY,EAAOZ,KACdS,EAAWP,KAAKC,kBAAkBH,GACtC,OAAIS,IAGFO,QAAQC,IAAR,+BAAoCjB,IAC7B,QA3Bb,OAkCmB,SAACK,EAAUC,GAC5BL,EAAWiB,IAAIb,EAAUC,GCrB3BY,CAAI,OAAQnB,GAEL,IAAMoB,EDsBN,WAA2D,IAA1CJ,EAAyC,uDAAjCd,EAAWG,aAAcQ,EAAQ,uCAC/D,OAAOX,EAAWa,OAAOC,EAAOH,I,QEjC5BQ,EAAqBC,0BAAgBC,KACrCC,EAAQC,sBAAYL,EDIE,GCJyBM,8BAAoBL,IAEzEG,EAAMG,SHLqB,CACzB1B,KAAM,SGMOuB,Q,eCDAI,MARf,WACE,OACI,qBAAKC,UAAU,MAAf,qBCMAC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACL,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJM,GAGJ,IAAMK,EAAQ,GACVC,EAAmB,EAUnBC,EAAaC,aAAY,WARrBF,EAAmBD,EAAMxB,SACzBM,QAAQC,IAAIiB,EAAMC,IAClBZ,EAAMG,SAASQ,EAAMC,MACrBA,IACAG,cAAcF,MAIwB,M","file":"static/js/main.61639580.chunk.js","sourcesContent":["import {\n} from \"../selectors/selectors\";\nimport {ArrayUtils} from \"../utils\";\n\nexport const init = () => ({\n  type: 'init'\n})\n\n","export class ReducerMap {\n  constructor() {\n    this.actionsToReducers = {}\n    this.initialState = {}\n  }\n\n  map(actionFn, reducer) {\n    let actionName = (typeof actionFn === 'function') ? actionFn.name : actionFn\n    if (!this.actionsToReducers[actionName]) {\n      this.actionsToReducers[actionName] = [];\n    }\n    let reducers = this.actionsToReducers[actionName];\n    reducers[reducers.length] = reducer;\n  }\n\n  reduce(startState, action) {\n    return this.getReducersForAction(action).reduce((state, reducer) =>\n        reducer(state, action), startState);\n  }\n\n  getReducersForAction(action) {\n    let type = action.type;\n    let reducers = this.actionsToReducers[type];\n    if (reducers) {\n      return reducers;\n    } else {\n      console.log(`No reducer found for ${type}`)\n      return [];\n    }\n  }\n}\n\nconst reducerMap = new ReducerMap();\n\nexport const map = (actionFn, reducer) => {\n  reducerMap.map(actionFn, reducer);\n}\n\nexport function reducer(state = reducerMap.initialState, action) {\n  return reducerMap.reduce(state, action);\n}\n\n","import * as actions from \"./actions\"\nimport { map, reducer } from \"./utils/redux-map\";\nimport { mutatorToReducer, ArrayUtils, reduceAll } from \"../utils\";\nimport {\n} from \"./mutators\"\nimport {\n} from \"../selectors/selectors\"\nimport {\n    init\n} from \"./actions\"\n\nexport const initialState = {\n}\n\nmap('init', init)\n\nexport const rootReducer = reducer","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { rootReducer, initialState } from \"./reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { init } from \"./actions\"\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst store = createStore(rootReducer, initialState, composeWithDevTools(middlewareEnhancer))\n\nstore.dispatch(init());\n\nexport default store\n","import '../main.css'\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          Hello.\n      </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport App from './components/App'\n\nimport {\n} from \"./redux/actions\";\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    rootElement\n)\n\nconst steps = []\nlet currentStepIndex = 0;\nlet runStep = () => {\n    if (currentStepIndex < steps.length) {\n        console.log(steps[currentStepIndex])\n        store.dispatch(steps[currentStepIndex]());\n        currentStepIndex++;\n        clearInterval(intervalId);\n    }\n}\n\nlet intervalId = setInterval(() => runStep(), 100)\n\n\n\n"],"sourceRoot":""}